
注释：有些细节，我们在用的时候会不注意，下面列举一些。

注意：转载需加 wangfeng little创建

我们知道分号表示一条语句的结尾。但是，有一些语法结构不需要在语句的结尾添加分号，主要是以下三种情况。

1：（1）for和while循环

for(;;){} // 没有分号

while(true){} // 没有分号

需要注意的是do...while循环是有分号的。

do {
    a--;
} while(a > 0); // 分号不能省略


（2）分支语句：if， switch， try

if (true) {} // 没有分号

switch () {} // 没有分号

try {} catch {} // 没有分号

（3）函数的声明语句

function f() {} // 没有分号

但是函数表达式仍然要使用分号。

var f = function f() {};

以上三种情况，如果使用了分号，并不会出错。因为，解释引擎会把这个分号解释为空语句。

2.toString会将注释一起打印出来

var w = (function(){
  /*
  *line1
  *line2
  */
  }).toString().split('\n').slice(1,-1).join('\n');
  console.log(w);
  
  你如果觉得输出为空就错了。最后结果是里面的注释：
  /*
  *line1
  *line2
  */
  
3.字符集

var s = "\uD834\uDF06"

s // "𝌆"
s.length // 2
/^.$/.test(s) // false
s.charAt(0) // ""
s.charAt(1) // ""
s.charCodeAt(0) // 55348
s.charCodeAt(1) // 57094

上面代码说明，对于于U+10000到U+10FFFF之间的字符，JavaScript总是视为两个字符（字符的length属性为2），用来匹配单个
字符的正则表达式会失败（JavaScript认为这里不止一个字符），charAt方法无法返回单个字符，charCodeAt方法返回每个字节
对应的十进制值。

下面的正则表达式可以识别所有UTF-16字符。

([\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF])

由于JavaScript引擎（严格说是ES5规格）不能自动识别辅助平面（编号大于0xFFFF）的Unicode字符，导致所有字符串处理函数
遇到这类字符，都会产生错误的结果（详见《标准库》一章的String对象章节）。如果要完成字符串相关操作，就必须判断字符
是否落在0xD800到0xDFFF这个区间。

下面是能够正确处理字符串遍历的函数。

function getSymbols(string) {
  var length = string.length;
  var index = -1;
  var output = [];
  var character;
  var charCode;
  while (++index < length) {
    character = string.charAt(index);
    charCode = character.charCodeAt(0);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      output.push(character + string.charAt(++index));
    } else {
      output.push(character);
    }
  }
  return output;
}

var symbols = getSymbols('𝌆');

symbols.forEach(function(symbol) {
  // ...
});

4.对象和键，值

对象的属性之间用逗号分隔，ECMAScript 5规定最后一个属性后面可以加逗号（trailing comma），也可以不加。

var o = {
  p: 123456,
  s: function () { ... },
}
代码中m属性后面的那个逗号，有或没有都不算错。但是，ECMAScript 3不允许添加逗号，所以如果要兼容老式浏览器（比如IE 8），
那就不能加这个逗号。

对象生成三种方法：
var o1 = {}; //常用
var o2 = new Object(); //注意Object的首字母是大写的 
var o3 = Object.create(null);//这个写法一般用在需要对象继承的场合，这是创建的一个空对象
用__proto__可以查看构成对象的原型。依次为：Object {},Object {},undefined。最后一个可以用 Object.create({})形式成为
Object {},第一个按照三个写法为var o1 = Object.create(Object.prototype);

我们在读取的时候：

if(window.a) {...} // 不报错
if(window['a']) {...} // 不报错
上面的后二种写法之所以不报错，是因为在浏览器环境，所有全局变量都是window对象的属性。window.a的含义就是读取window对象的a属性，
如果该属性不存在，就返回undefined，并不会报错。

需要注意的是，后二种写法有漏洞，如果a属性是一个空字符串（或其他对应的布尔值为false的情况），则无法起到检查变量是否声明的作用。
正确的写法是使用in运算符。

if('a' in window) {
  ...
}

但in运算符的一个问题是，它不能识别对象继承的属性。

var o = new Object();
o.hasOwnProperty('toString') // false
'toString' in o // true
上面代码中，toString方法不是对象o自身的属性，而是继承的属性，hasOwnProperty方法可以说明这一点。但是，in运算符不能识别，对继承
的属性也返回true。

下面是类数组但不是数组：
(1)类数组对象
var a = {
    0:'a',
    1:'b',
    2:'c',
    length:3
};
a[0] // 'a'
a[2] // 'c'
a.length // 3
a[3] = 'd';//为对象a添加了一个数字键，但是length属性没变
a.length // 3

(2)arguments对象（在函数体内，标识符arguments是指向实参对象的引用，实参对象是一个类数组对象 arguments[0]，arguments.length）
function args() { return arguments }
var arrayLike = args('a', 'b');
arrayLike[0] // 'a'
arrayLike.length // 2
arrayLike instanceof Array // false

(3)// DOM元素集
var elts = document.getElementsByTagName('h3');
elts.length // 3
elts instanceof Array // false

(4)// 字符串
'abc'[1] // 'b'
'abc'.length // 3
'abc' instanceof Array // false

不过以上几个形式都可以用Array.prototype.slice.call(变量)转为为Array。

对于遍历：
// for循环
function forArgs() {
    for (var i=0; i<arguments.length; i++) {
        console.log(i+'. '+arguments[i]);
    }
}

// forEach方法
function forArgs() {
    Array.prototype.forEach.call(arguments, function (elem, i) {
        console.log(i+'. '+elem);
    });
}

with操作同一个对象的多个属性时，提供一些书写的方便
var o = {};
with (o){
  x = "abc";
}
with区块内部的变量，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。这是因为with区块没有改变作用域，
它的内部依然是当前作用域。

with (o) {
  console.log(x);
}
单纯从上面的代码块，根本无法判断x到底是全局变量，还是o对象的一个属性。这非常不利于代码的除错和模块化，编译器也无法对这段代码
进行优化，只能留到运行时判断，这就拖慢了运行速度。因此，建议不要使用with语句，可以考虑用一个临时变量代替with。
with(o1.o2.o3) {
  console.log(p1 + p2);
}
// 可以写成
var temp = o1.o2.o3;
console.log(temp.p1 + temp.p2);
