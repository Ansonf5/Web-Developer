

说明：随着手机市场的不断扩大，wap开发比重也在加重比例。手机中的jq，我们需要熟练的掌握，本节我们来总结一下zepto在实际项
目常用中的用法和说明。

转载：需加 wangfeng 创建

1.对不支持zepto的IE10以下可以有以下写法（这个可以不考虑因为wap端没有）
<script> 
    document.write('<script src=' + 
    ('__proto__' in {} ? 'http://zeptojs.com/zepto' : 'http://code.jquery.com/jquery-1.11.2') + 
    '.js><\/script>') 
 </script> 
  
2.加载完成 
 Zepto(function($){ 
        alert（'page is over'); 
  }) 
  当然$还是可以用的，比较zepto是jq的精简版
 
3.驼峰式转化 
$.camelCase('https://github.com/islittle/Web-Developer/new/master/js-notes') 
结果为：https://github.com/islittle/WebDeveloper/new/master/jsNotes  
 
4.检查父节点是否包含给定的dom节点
例如：<h2><span class="children">icon</span>文字</h2> 
console.log($.contains($('h2')[0], $('.children')[0]));--》ture 
 
5.遍历数组元素或以key-value值对方式遍历对象（常用的遍历方法，返回 false 时停止遍历）
$.each(['a', 'b', 'c'], function(key, value){ 
	console.log(key); 
	console.log(value); 
	console.log('key is %s，value is: %s', key, value); 
	console.log('key is %i，value is: %s', key, value); 
	console.log('key is %i，value is: %o', key, value); 
}) 
这里的%s（占位符），%i（整数还可以是%d），%o（ 对象的链接），还有%f（浮点数），%c（ CSS格式字符串）都是console的  
 
6.$.fn添加方法 
empty() 例子： 
$.fn.empty = function(){ 
  return this.each(function(){ this.innerHTML = '' }) 
} 
7.获取数组：$.grep(items, function(item){ ... }) ⇒ array 
例如：$.grep([1,2,3], function(item){ 
  return item >= 2; 
})==》[2,3] 
 
8.搜索数组中指定值并返回它的索引（如果没有找到则返回-1） 
$.inArray(element, array, [fromIndex(可选)]) ⇒ number; 
(多个的时候第一个找到的索引) 
9.$.isArray $.isArray(object) ⇒ boolean  如果object是array，则返回ture。 
$.isFunction  $.isFunction(object) ⇒ boolean  如果object是function，则返回ture。 
$.isPlainObject(object) ⇒ boolean  测试对象是否是纯粹的对象（通过 "{}" 或者 "new Object" 创建的），如果是，则返回true
(1)$.isPlainObject({})         // => true 
(2)$.isPlainObject(new Object) // => true 
(3)$.isPlainObject(new Date)   // => false 
(4)$.isPlainObject(window)     // => false 
$.isWindow(object) ⇒ boolean   确定参数是否为一个窗口（window对象），如果是则返回true。 
这在处理iframe时非常有用，因为每个iframe都有它们自己的window对象，使用常规方法obj==window校验这些objects的时候会失败。
$.map(collection, function(item, index){ ... }) ⇒ collection
通过遍历集合中的元素，通过函数返回一个新的数组，null and undefined 将被过滤掉。
console.log($.map({"ce":1,"shi":2,"a":3},function(value,key){
     if(value>0){return key;}
}));==>["ce", "shi", "a"]
$.parseJSON(string) ⇒ object
类似本地JSON.parse 方法，接受一个标准格式的 JSON 字符串，并返回解析后的 JavaScript 对象。
$.trim(string) ⇒ string
删除字符串开始和末尾的空白符。类似String.prototype.trim()。
$.type(object) ⇒ string
获取JavaScript 对象的类型。可能的类型有： null undefined boolean number string function array date regexp object error

10.doc-list文档方法
add(selector, [context]) ⇒ self
添加元素到匹配的元素集合。如果content参数存在，只在content中进行查找，否则在document中查找。
addClass(name) ⇒ self
addClass(function(index, oldClassName){ ... }) ⇒ self
eq:<ul>
	<li class="this">1</li>
	<li class="is">2</li>
  </ul>
  $('ul li').on({
	mouseenter:function(){
		$(this).addClass(function(index, oldClass){
			return 'li' +  index;
		});
	}
});
==>
<ul>
	<li class="this li0">1</li>
	<li class="is li0">2</li>
</ul>
为每个匹配的元素添加指定的class类名。多个class类名通过空格分隔。

after,append,appendTo,attr,before,children,clone,closest,css,each,empty,eq,filter,not,find,first,has,hasClass,height,
hide,html,index,insertAfter,insertBefore,last,map,next,position(返回top，left值),prepend(插入到前面和append相反),
prependTo,prev(每一个元素的前一个兄弟节点),ready
这些简单的用法都不作说明了。
contents() ⇒ collection
获得每个匹配元素集合元素的子元素，包括文字和注释节点。.contents()和.children()方法类似，只不过前者包括文本节点以及
jQuery对象中产生的HTML元素。
concat(nodes, [node2, ...]) ⇒ self(这是一个Zepto提供的方法，不是jquey的API 。)
concat() 方法用于连接两个或多个数组。
该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。
var arr = new Array(3)
arr[0] = "used"
arr[1] = "fo"
arr[2] = "test"
var arr2 = new Array(3)
arr2[0] = "append"
arr2[1] = "to"
arr2[2] = "here"
var a = [1,2,3];
var b =[4,5] 
document.write(arr.concat(arr2));==>used,fo,test,append,to,here
document.write(a.concat(4,5));==>1,2,3,4,5
document.write(a.concat(a,b,b));==>1,2,3,1,2,3,4,5,4,5
forEach(function(item, index, array){ ... }, [context])(这是一个Zepto提供的方法，不是jquery的API。)
遍历当前Zepto集合对象的买个元素，有点类似 each，但是遍历函数的参数不一样，当函数返回 false 的时候，遍历不会停止。
[].forEach(function(value, index, array) {
    // ...
});
对比jQuery中的$.each方法：
$.each([], function(index, value, array) {
    // ...
});
eq:(依次弹出数组里的数字)
var a = [1, 2 ,3, 4];
a.forEach(alert);
$.each(a,function(index,value){alert(value)})
get() ⇒ array
get(index) ⇒ DOM node
从当前Zepto对象集合中获取所有元素或单个元素。当index参数不存在的时候，以普通数组的方式返回所有的元素。当指定index时，
只返回该置的元素。这点与与eq不同，该方法返回的不是Zepto集合对象。
indexOf(element, [fromIndex]) ⇒ number(这是一个Zepto的方法，不是jquer的api。)
在当前Zepto中获取一个元素的位置。如果formindex参数给出，从该位置往后查找，返回基于0的位置，如果没找到，则返回-1。index
方法是基于这个方法实现的。
eq:
<ul>
	<li class="this">1</li>
	<li class="is">2</li>
</ul>
console.log($('li').indexOf($('.is')[0]));==>1
js中还可以用来查找数组和字符串的位置
a = [1,2,4,5,3];
var b = 'This is used for test'
console.log(a.indexOf(4));==>2
console.log(a.indexOf(4,3));==>-1
console.log(b.indexOf('e',3));==>10
is(selector) ⇒ boolean（$('#demo').is(':visible')就会报错，这里不能用伪类，需用的话需要下selector模块）
判断当前Zepto元素集合中的第一个元素是否符css选择器。对于基础支持jquery的非标准选择器类似： :visible包含在可选的“
selector”模块中。jQuery CSS extensions 不被支持。 选择“selector”模块仅仅能支持有限几个最常用的方式。
offsetParent() ⇒ collection(从下向上查找，如都没有，就为body)
找到第一个定位过的祖先元素，在ccs中意味着它的position 值为“relative”, “absolute” or “fixed”
pluck(property) ⇒ array（这是一个Zepto的方法，不是jquery的api）
获取Zepto对象集合中每一个元素的属性值。返回值为 null或undefined值得过滤掉。
eq :console.info($('div > *').pluck('nodeName'))
prop（这个在jq中有些区别,可以分为对于HTML元素自有属性处理用prop（例如：href，target，class，checked，selected），
自定义的DOM属性用attr（例如：active））
{
这里为从其他人那听到的结论：
1.添加属性名称该属性就会生效应该使用prop();
2.是有true,false两个属性使用prop();
3.其他则使用attr();
}
读取或设置dom元素的属性值。它在读取属性值的情况下优先于 attr，因为这些属性值会因为用户的交互发生改变，
如checked，selected
push(这是一个zepto的方法，不是jquery的api)
添加元素到当前Zepto对象的最后。
可以用一下方法理解：
function push(a) {
	arr.push(a);
	return arr.length;
}
